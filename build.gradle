plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'

    // Handle integrationTest
    id 'com.coditory.integration-test' version '1.1.11'
    id 'jacoco'

    // For test & quality control
    id 'org.sonarqube' version '3.1.1'
}

group = 'io.github.revelation-game'
sourceCompatibility = '15'
// Load version from file
def buildProperties = new Properties()
file("version.properties").withInputStream { stream ->
    buildProperties.load(stream)
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2020.0.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Both for Ui
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.5'
    implementation 'com.google.code.gson:gson'

    // Find bugs with nullable
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.cloud:spring-cloud-contract-wiremock'

    // For testing with sse
    // testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// IntegrationTest plugin
jacocoTestReport {
    executionData(fileTree(project.buildDir).include("jacoco/*.exec"))
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

    testLogging {
        events "passed", "skipped", "failed", "standardError" //, "standardOut"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

// --- Setup Sonar ---
sonarqube {
    properties {
        property "sonar.projectKey", "revelation-game_revelation-realtime"
        property "sonar.organization", "revelation-game"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}